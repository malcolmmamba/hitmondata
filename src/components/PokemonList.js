import React, { Component } from 'react';
import {PokedexCard} from "./Pokedex/PokedexCard";
import {
	dashToRange, hasSprite, masterlist, nationalDex, otherForms,
	region1_new,
	region2_new,
	region3_new,
	region4_new,
	region5_new,
	region6_all, region7_all, region8a_all, region8b_all, region9a_all, regionalVariants
} from "./Pokedex/helpers";

const common_nav = (
	<div className="flex card_list_anchors">
		<a className="card_list_anchor" href="/region/national" style={{ background: 'slategray' }}>National</a>
		<a className="card_list_anchor" href="/region/kanto" style={{ background: 'darkred' }}>Kanto</a>
		<a className="card_list_anchor" href="/region/johto" style={{ background: 'darkgoldenrod' }}>Johto</a>
		<a className="card_list_anchor" href="/region/hoenn" style={{ background: 'darkgreen' }}>Hoenn</a>
		<a className="card_list_anchor" href="/region/sinnoh" style={{ background: 'darkmagenta' }}>Sinnoh</a>
		<a className="card_list_anchor" href="/region/unova" style={{ background: 'black' }}>Unova</a>
		<a className="card_list_anchor" href="/region/kalos" style={{ background: 'darkblue' }}>Kalos</a>
		<a className="card_list_anchor" href="/region/alola" style={{ background: 'orangered' }}>Alola</a>
		<a className="card_list_anchor" href="/region/galar" style={{ background: 'midnightblue' }}>Galar</a>
		<a className="card_list_anchor" href="/region/hisui" style={{ background: 'steelblue' }}>Hisui</a>
		<a className="card_list_anchor" href="/region/paldea" style={{ background: 'indigo' }}>Paldea</a>
		<a className="card_list_anchor" href="/region/other" style={{ background: 'darkgray' }}>Others</a>
	</div>
)

export default class PokemonList extends Component {
	regions = {
		'national': nationalDex,
		'kanto': region1_new,
		'johto': region2_new,
		'hoenn': region3_new,
		'sinnoh': region4_new,
		'unova': region5_new,
		'kalos': region6_all,
		'alola': region7_all,
		'galar': region8a_all,
		'hisui': region8b_all,
		'paldea': region9a_all,
		'regional': regionalVariants,
		'other': otherForms
	}
	render() {
		const { name, query } = this.props.params;
		switch (query) {
			case undefined:
				if (name) {
					return (
						<div>
							{common_nav}
							<h3 className="card_list_header" id="natdex">National Pokédex</h3>
							<div className="card_list">
								{ Object.entries(nationalDex).map(PokedexCard)}
							</div>
						</div>
					)
				} else {
					return (
						<div>
							{common_nav}
							<h3 className="card_list_header" id="natdex">National Pokédex</h3>
							<div className="card_list">
								{ Object.entries(nationalDex).map(PokedexCard)}
							</div>
						</div>
					)
				}
			case 'national':
			case 'kanto':
			case 'johto':
			case 'hoenn':
			case 'sinnoh':
			case 'unova':
			case 'kalos':
			case 'alola':
			case 'galar':
			case 'hisui':
			case 'paldea':
			case 'regional':
			case 'other':
				return (
					<div>
						{ common_nav }
						<h3 className="card_list_header" id={query}>{query.toUpperCase()}</h3>
						<div className="card_list">
							{ Object.entries(this.regions[query]).map(PokedexCard)}
						</div>
					</div>
				)
			case 'sorted':
			default:
				const fixedDex = "1-3,3-1,3-0g,4-6,6-1,6-2,6-0g,7-8,9,9-1,9-0g,10-12,12-0g,13-15,15-1,16-18,18-1,19-20,19-1,20-1,21-24,172,25,25-0g,25-1,25-2,25-3,25-4,25-5,25-6,25-7,25-8,26,26-1," +
					"27,28,27-1,28-1,29-34,173,35-38,37-1,38-1,174,39-42,169,43-45,182,46-51,50-1,51-1,960-961," +
					"52-53,52-0g,52-1,53-1,52-2,863,54-57,979,58-59,58-1,59-1,60-62,186,63-65,65-1,66-68,68-0g,69-73,948-949," +
					"74-76,74-1,75-1,76-1,77-78,77-1,78-1,79-80,80-1,199,79-1,80-2,199-1,81-82,462,83,83-1,865," +
					"84-89,88-1,89-1,90-94,94-1,94-0g,95,208,208-1,96-99,99-0g,100-101,100-1,101-1,102-103,103-1,104-105,105-1,236,106-107,237," +
					"108,463,109-110,110-1,111-112,464,440,113,242,114,465,115,115-1,116-117,230,118-121,439,122,122-1,866," +
					"123,212,212-1,900,238,124,239,125,466,240,126,467,127,127-1,128,128-1,128-2,128-3,129-130,130-1," +
					"131,131-0g,132-133,133-0g,136,196-197,470,471,700,137,233,474,138-141,142,142-1,446,143,143-0g,144,144-1,145,145-1,146,146-1,147-150,150-1,150-2,151," +
					"152-157,157-1,158-168,170-171,175-176,468,177-181,181-1,298,183-184,438,185,187-189,190,424," +
					"191-193,469,194-195,194-1,980,198,430,200,429," + 
					"201,201-1,201-2,201-3,201-4,201-5,201-6,201-7,201-8,201-9,201-10,201-11,201-12,201-13,201-14,201-15,201-16,201-17,201-18,201-19,201-20,201-21,201-22,201-23,201-24,201-25,201-26,201-27," +
					"360,202-203,981,204-205,206,982,982-1,207,472," +
					"209-211,211-1,904,213-214,214-1,215,461,215-1,903,216-217,901,218-221,473,222,222-1,864," +
					"223-225,458,226-229,229-1,231-232,234,899,235,241,243-248,248-1,249-251," +
					"252-254,254-1,255-257,257-1,258-260,260-1,261-264,263-1,264-1,862,265-282,282-1,475,475-1,283-297,299,476," +
					"300-301,302,302-1,303,303-1,304-306,306-1,307-308,308-1,309-310,310-1,311-314,406,315,407,316-319,319-1," +
					"320-323,323-1,324-334,334-1,335-351,351-1,351-2,351-3,352-354,354-1,355-356,477,357,433,358,359,359-1,361-362,362-1,478,363-373,373-1," +
					"374-376,376-1,377-379,894,895,486,380,380-1,381,381-1,382,382-1,383,383-1,384,384-1,385-386,386-1,386-2,386-3," +
					"387-405,408-413,412-1,413-1,412-2,413-2,414-421,421-1,422-423,422-1,423-1,425-428,428-1,431-432,434-437," +
					"441-445,445-1,447-448,448-1,449-450,449-1,450-1,451-457,459-460,460-1,479,479-1,479-2,479-3,479-4,479-5," +
					"480-483,483-1,484,484-1,487,487-1,485,488,491,489-490,492,492-1," +
					"493,493-1,493-2,493-3,493-4,493-5,493-6,493-7,493-8,493-9,493-10,493-11,493-12,493-13,493-14,493-15,493-16,493-17," +
					"494-503,503-1,504-521,521-1,522-531,531-1,532-549,549-1,550,550-1,550-2,902,902-1," +
					"551-555,555-2,554-1,555-1,555-3,556-563,562-1,867,564-569,569-0g,570-571,570-1,571-1,572-586,585-1,586-1,585-2,586-2,585-3,586-3,587-593,592-1,593-1,594-618,618-1,619-625,983,626-628,628-1,629-641,641-1,642,642-1,645,645-1,905,905-1,643,646-1,646,646-2,644,647,647-1,648,648-1,649,649-1,649-2,649-3,649-4," +
					"650-658,658-2,659-666,666-1,666-2,666-3,666-4,666-5,666-6,666-7,666-8,666-9,666-10,666-11,666-12,666-13,666-14,666-15,666-16,666-17,666-18,666-19," +
					"667-668,668-1,669-671,669-1,670-1,671-1,669-2,670-2,671-2,669-3,670-3,671-3,669-4,670-4,671-4,670-5," +
					"672-676,676-1,676-2,676-3,676-4,676-5,676-6,676-7,676-8,676-9," +
					"677-678,678-1,679-681,681-1,682-699,701-706,705-1,706-1,707-709,710-1,711-1,710,711,710-2,711-2,710-3,711-3," +
					"712-713,713-1,714-715,716-1,716,717,718-1,718,718-4,719,719-1,720,720-1,721," +
					"722-724,724-1,725-741,741-1,741-2,741-3,742-745,745-1,745-2,746,746-1,747-774," +
					"774-7,774-8,774-9,774-10,774-11,774-12,774-13,774-14,775-800,800-1,800-2,800-3,801,801-1,802-809,809-0g," +
					"810-812,812-0g,813-815,815-0g,816-818,818-0g,819-823,823-0g,824-826,826-0g,827-834,834-0g,835-839,839-0g,840-841,841-0g,842,842-0g,843-844,844-0g,845,845-1,845-2,846-849,849-1,849-0g,850-851,851-0g,852-858,858-0g,859-861,861-0g,868-869,869-1,869-2,869-3,869-4,869-5,869-6,869-7,869-8,869-0g,875,875-1,876,876-1,877,877-1,878-879,879-0g,880-884,884-0g,885-888,888-1,889,889-1,890,890-1,891-892,892-0r,892-0g1,892-0g2,893,893-1,896,898-1,898,898-2,897," +
					"906-916,916-1,917-925,925-1,926-931,931-1,931-2,931-3,932-947,950-959,962-964,964-1,965-978,978-1,978-2,984-998,999-1,999-1006,1007-1,1007,1008-1,1008"
				const list_array = query === 'sorted' ? fixedDex.split(',') : query.split(',')
				const cd_base = {
					2018: '25,147,1,179,4,246,7,133,152,374,155',
					2019: '158,220,252,371,255,287,258,280,387,328,390',
					2020: '393,111,63,273,13,92,129,137,4,125,126',
					2021: '66,315,661,495,333,443,498,133,501,355,403',
					2022: '363,1,187,27,27-1,258,759,74-1,633,396,263-1,524,607,147,216',
					2023: '650,246,714,79,79-1,176,220,653',
				}
				const cd_move = {
					2018: '25,149,3,181,6,248,9,133,134,135,136,196,197,154,376,157',
					2019: '160,473,254,373,257,289,260,282,475,389,330,392',
					2020: '395,464,65,275,15,94,130,474,6,466,467',
					2021: '68,407,663,497,334,445,500,133,134,135,136,196,197,470,471,700,503,477,405',
					2022: '365,3,189,28,28-1,260,760,76-1,635,398,862,526,609,149,901',
					2023: '652,248,715,80,80-2,199,199-1,468,473,655',
				}
				const link_list = [
					['trash', '1-3,7-12,16-18,21-26,32-36,39-49,54-57,63-68,81-82,86-94,96-97,100-108,111-112,114-115,120-121,123-125,128,131-132,134-143,147-149,151,158-172,182-185,190-200,206,208-214,216-219,222,226-227,231-233,235,237,239-241,251-264,273-275,278-279,283-289,292-297,299-303,307-308,311-312,314-319,322-326,328-332,335-337,339-340,342-348,353-356,358-359,363-365,370,374-376,385-386,399-411,418-419,424-438,441,459-478,486,490-494,498-500,509-523,527-528,531,538-539,546-549,557-560,562-565,568-569,580-581,595-601,605-609,613-614,616-618,621-623,627-635,647-652,653-655,659-660,682-685,694-695,700,702,708-709,712,714-716,719-721,767-768,777,801-802,807,819-820,831-832,862-863,865-867,893,901'],
					['need', '4-6,13-15,19-20,27-31,37-38,50-53,58-62,69-80,83-85,95,98-99,109-110,113,116-119,122,126-127,129-130,133,144-146,150,152-157,173-181,186-189,201-205,207,215,220-221,223-225,228-230,234,236,238,242-250,265-272,276-277,280-282,290-291,298,304-306,309-310,313,320-321,327,333-334,338,341,349-352,357,360-362,366-369,371-373,377-384,387-398,412-417,420-423,439-440,442-458,479-485,487-489,495-497,501-508,524-526,529-530,532-537,540-545,550-556,561,566-567,570-579,582-594,602-604,610-612,615,619-620,624-626,636-646,656-658,661-681,686-693,696-699,701,703-707,710-711,713,717-718,722-766,769-776,778-800,803-806,808-818,821-830,833-861,864,868-892,894-900,902-1008'],
					['unknown1', '13,14,15,225,234,276,277,290,291,292,313,361,362,453,454,478,574,575,576,690,691,751,752'],
					['to_snipe', '13,14,15,234,276,277,290,291,313,453,454,574,575,576,690,691,751,752'],
					['done', '23,24,213,235,300,301,363,364,365,406,433,498,499,500,564,565,613,614,650,651,652,712,714,715'],
					['mythical', '151,251,385-386,490-494,647-649,719-721,801-802,807,893'],
					['cd_base', Object.values(cd_base).join(',')],
					['18b', cd_base[2018]],
					['19b', cd_base[2019]],
					['20b', cd_base[2020]],
					['21b', cd_base[2021]],
					['22b', cd_base[2022]],
					['23b', cd_base[2023]],
					['cd_move', Object.values(cd_move).join(',')],
					['18m', cd_move[2018]],
					['19m', cd_move[2019]],
					['20m', cd_move[2020]],
					['21m', cd_move[2021]],
					['22m', cd_move[2022]],
					['23m', cd_move[2023]],
					['75', '35,36,37,38,39,40,173,174,209,210,222,298,300,301,370,431,432,572,573,574,575,576,667,668,741,764,864'],
					['75+', '35,36,37,38,39,40,173,174,209,210,222,298,300,301,370,431,432,572,573,574,575,576,667,668,741,764,864,29,113,115,124,241,242,314,413,416,478,548,549,629,630,669,670,671,758,761,762,763,856,857,858,868,869,957,958,959,30,31,238,380,440,488,905'],
				]
				return list_array.length ? (
					<div>
						<div className="flex card_list_anchors">
							{
								link_list.map(([name, url]) => <a className="card_list_anchor" href={'/pokemon_go/' + url}>{name}</a> )
							}
						</div>

						<h3 className="card_list_header">Query</h3>
						<div style={{padding: '0.5rem 1rem', borderRadius: '0.5rem', border: '1px solid #00000040', marginBottom: '3rem'}}>
							<code>{query === 'sorted' ? fixedDex : query}</code>
						</div>
						<div className="card_list">
							{list_array.map(i => hasSprite(i) || hasSprite(i+'-0') ? PokedexCard(i, masterlist[i]) : dashToRange(i).map(j => PokedexCard(j, masterlist[`${j}-0`])))}
						</div>
					</div>
				) : <div>Invalid array</div>
		}

	}
}